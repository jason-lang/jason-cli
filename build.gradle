/*
   Jason Gradle build file
*/

plugins {
    // id 'org.graalvm.buildtools.native' version '0.9.20'
}

defaultTasks 'build'

apply plugin: 'java-library'
// apply plugin: 'maven-publish'

version '1.0-SNAPSHOT'
group   'org.jason'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            srcDir 'src/resources'
        }
    }
}

repositories {
    mavenCentral()

    maven { url "https://raw.githubusercontent.com/jacamo-lang/mvn-repo/master" }
    maven { url 'https://repo.gradle.org/gradle/libs-releases' }
}

dependencies {
    implementation 'org.jason:jason:3.2-SNAPSHOT'
    implementation 'info.picocli:picocli:4.7.1'
    annotationProcessor 'info.picocli:picocli-codegen:4.7.1'
    // implementation('org.apache.ant:ant:1.10.5')
    // implementation('org.gradle:gradle-tooling-api:7.4.2')

    testImplementation group: 'junit', name: 'junit', version: '4.12'
}

compileJava {
    // sourceCompatibility = ${java-version}
    // targetCompatibility = ${java-version}
    options.compilerArgs += ["-Aproject=${project.group}/${project.name}"]
}

// copy dep jars and scritps into build directory
task copyJarsToBuild {
    inputs.files configurations.runtimeClasspath.files
    inputs.dir   'src/main/resources/scripts'
    outputs.dir  'build/libs'
    outputs.dir  'build/scripts'
    doLast {
        copy {
            from configurations.runtimeClasspath
            into 'build/libs'
        }
        copy {
            from 'src/main/resources/scripts'
            into 'build/scripts'
            include '**'
        }
    }
}

jar {
    archiveBaseName = 'jason-cli'
    manifest {
        attributes 'Main-Class': 'jason.cli.JasonCLI',
                   'Specification-Title': 'Jason CLI',
                   'Specification-Version': project.version,
                   'Implementation-Version': new Date().toString()
    }

}
jar.dependsOn(copyJarsToBuild)

// // creates a native exec with
// //       ./gradlew nativeCompile
// // requires: https://www.graalvm.org/22.3/docs/getting-started/macos/
// // see https://graalvm.github.io/native-build-tools/latest/gradle-plugin.html
// // doesnot work, I use
// //       native-image -cp "build/libs/*" jason.cli.JasonCLI -o bin/jason
//
// graalvmNative {
//     binaries {
//         main {
//             // Main options
//             imageName = 'jason' // The name of the native image, defaults to the project name
//             mainClass = 'jason.cli.JasonCLI' // The main class to use, defaults to the application.mainClass
//             debug = true // Determines if debug info should be generated, defaults to false (alternatively add --debug-native to the CLI)
//             verbose = true // Add verbose output, defaults to false
//             // fallback = true // Sets the fallback mode of native-image, defaults to false
//             // sharedLibrary = false // Determines if image is a shared library, defaults to false if `java-library` plugin isn't included
//             // quickBuild = false // Determines if image is being built in quick build mode (alternatively use GRAALVM_QUICK_BUILD environment variable, or add --native-quick-build to the CLI)
//             // richOutput = false // Determines if native-image building should be done with rich output
//             // requiredVersion = '22.3' // The minimal GraalVM version, can be `MAJOR`, `MAJOR.MINOR` or `MAJOR.MINOR.PATCH`

//             // systemProperties = [name1: 'value1', name2: 'value2'] // Sets the system properties to use for the native image builder
//             // configurationFileDirectories.from(file('src/my-config')) // Adds a native image configuration file directory, containing files like reflection configuration
//             // excludeConfig.put("org.example.test:artifact:version", ["^/META-INF/native-image/.*", "^/config/.*"]) // Excludes configuration that matches one of given regexes from JAR of dependency with said coordinates.
//             // excludeConfig.put(file("path/to/artifact.jar"), listOf("^/META-INF/native-image/.*", "^/config/.*"))

//             // Advanced options
//             // buildArgs.add('-H:Extra') // Passes '-H:Extra' to the native image builder options. This can be used to pass parameters which are not directly supported by this extension
//             // jvmArgs.add('flag') // Passes 'flag' directly to the JVM running the native image builder

//             // Runtime options
//             // runtimeArgs.add('--help') // Passes '--help' to built image, during "nativeRun" task

//             // useFatJar = true // Instead of passing each jar individually, builds a fat jar
//             // toolchainDetection = false
//             // javaLauncher = javaToolchains.launcherFor {
//             //     languageVersion = JavaLanguageVersion.of(17)
//             //     vendor = JvmVendorSpec.matching("GraalVM Community")
//             // }
//         }
//     }
// }
